// main global script file

// Globals from GUIscript
import int ActionLabelColorHighlighted;
import char key_l_yes, key_u_yes, key_l_no, key_u_no; 
import int action_l_keycode[eActionsCount]; 
import int action_u_keycode[eActionsCount];
import int GStopsaveitem;
import int listBoxGap;
import int lang;
import InventoryItem*ItemGiven; 

// Door IDs in use are:
///////////////////////////////////////////////
// ID 20 - Sample Door in Room 1
///////////////////////////////////////////////

void Bind9VerbControls()
{
    G9V.Init_BindGUIs(gAction);
    G9V.Init_BindControls_Options_Main(  gOptions,  
                                    OptionsSave,  
                                    OptionsLoad, 
                                    OptionsPlay, 
                                    OptionsQuit, 
                                    OptionsRestart, 
                                    OptionsSldMusic, 
                                    OptionsSldSound, 
                                    OptionsSldSpeed, 
                                    OptionsTitle,
                                    OptionsMusic,
                                    OptionsSound,
                                    OptionsSpeed,
                                    OptionsDefault);
                                    
                             
    G9V.Init_BindControls_Other(    gRestart, 
                                    gConfirmexit, 
                                    gPausedText,
                                    gConfirmexitText,
                                    gRestartText);
                                    
                                    
    G9V.Init_BindControls_Save(     gSave,
                                    SaveCancel,
                                    SaveOK,
                                    SaveScrollUp,
                                    SaveScrollDown,
                                    SaveListBox,
                                    SaveLabel, 
                                    SaveTitle, 
                                    gSavetextbox);
    
    G9V.Init_BindControls_Restore(  gRestore, 
                                    RestoreCancel,
                                    //RestoreOK,
                                    RestoreScrollUp,
                                    RestoreScrollDown,
                                    RestoreListBox, 
                                    RestoreTitle
                                    );
    G9V.Init_BindButtons_Inventory(InvUp, InvDown);  
    
}


// =======================================================================================
function game_start() {

  //Tell the 9verb modules the actual names of the controls in this game's GUIs
  Bind9VerbControls();
    
  String tr_lang;
  // --- translate GUI action buttons ---
  tr_lang = GetTranslation("GUI_LANGUAGE");
  tr_lang = tr_lang.LowerCase();
  
  if (tr_lang == "de") {
    lang = eLangDE;
  }
  else if (tr_lang =="es") {
    lang = eLangES;
  }
  else if (tr_lang =="fr") {
    lang = eLangFR;
  }  
  else if (tr_lang =="en") {
    lang = eLangEN;
  }
  else if (tr_lang =="it") {
    lang = eLangIT;
  }     
  InitGuiLanguage();
  AdjustGUIText();
  // --- Set default Door strings (Look, locked and wrong item)
  set_door_strings("The door looks solid.","It is locked.","I can't unlock it with that.","I have to close it first.","Now it's unlocked.","The door is locked again.");
  // --- initialize game settings ---
  SetDefaultAction(eMA_WalkTo);    
  set_double_click_speed(GetGameSpeed()/4);

  // --- set the pixel gap for listbox items according to the screen res
  if (System.ScreenWidth<640) listBoxGap = 2; 
  else listBoxGap = 4;
}

function on_mouse_click(MouseButton button) {
}

function repeatedly_execute() {
}

function on_key_press(eKeyCode keycode) {
  // called when a key is pressed. keycode holds the key's ASCII code
  

  G9V_Events.OnKeyPress(keycode);

}

function on_event(EventType event, int data) {
  if (event==eEventLeaveRoom)
  if (event==eEventRestoreGame) {
    //TODO : objectify this
    AdjustLanguage();
  }
  if (event==eEventEnterRoomBeforeFadein || event==eEventRestoreGame)
    player.PlaceOnWalkableArea();
}


////////////////////////////////////////////////////////////////////////////////////
// GUI handling
////////////////////////////////////////////////////////////////////////////////////






    

function Action_Click(GUIControl *control, MouseButton button) {
    G9V_Events.OnClick_Action(control);
}

function btnMainOpt_OnClick(GUIControl *control, MouseButton button)
{
    G9V_Events.OnClick_MainOptionsButton();
}

function ScrollInv_Click(GUIControl *control, MouseButton button) 
{
    G9V_Events.OnClick_ScrollInv(control);
}

function Options_Click(GUIControl *control, MouseButton button) 
{
    G9V_Events.OnClick_Option(control);
}

function OptionsRestart_OnClick(GUIControl *control, MouseButton button)
{
    G9V_Events.OnClick_OptionRestart();
}

function OptionsDefault_OnClick(GUIControl *control, MouseButton button)
{
    G9V_Events.OnClick_OptionsDefault(control);
}

function OptionsSldMusic_OnChange(GUIControl *control)
{
    G9V_Events.OnClick_OptionsSliderMusic();
}

function OptionsSldSound_OnChange(GUIControl *control)
{
    G9V_Events.OnClick_OptionsSliderSound();
}

function OptionsSldSpeed_OnChange(GUIControl *control)
{
    G9V_Events.OnClick_OptionsSliderSpeed();
}

function Restore_Click(GUIControl *control, MouseButton button) 
{
    G9V_Events.OnClick_Restore(control);
}

function RestoreListBox_Click(GUIControl *control) 
{
    G9V_Events.OnClick_RestoreListBox();
}

function Save_Click(GUIControl *control, MouseButton button) 
{
    G9V_Events.OnClick_Save(control);
}

function SaveListBox_Click(GUIControl *control) 
{
    G9V_Events.OnClick_SaveListBox();
}

function SaveTextBox_Click(GUI *theGui, MouseButton button) 
{
    G9V_Events.OnClick_SaveTextBox();
}

function dialog_request(int param) 
{
}

//////////////////////////////////////////////////////////////////////////
///////////////////Custom FUNCTIONS//////////////////////////////////
//////////////////////////////////////////////////////////////////////////

/* Character, Object, Hotspot full blown SAMPLE
function cChar_AnyClick() {
  // WALK TO
  if (UsedAction(eMA_WalkTo)) {
    Go();
  }
  // TALK TO
  else if (UsedAction(eGA_TalkTo)) {
    Unhandled();
  }
  // LOOK AT
  else if(UsedAction(eGA_LookAt)) {
    Unhandled();
  }
  // OPEN
  else if(UsedAction(eGA_Open)) {
    Unhandled();
  }  
  // CLOSE
  else if(UsedAction(eGA_Close)) {
    Unhandled();
  }
  // USE
  else if(UsedAction(eGA_Use)) {
    Unhandled();
  }
  // Push
  else if(UsedAction(eGA_Push)) {
    Unhandled();
  }
  // Pull
  else if(UsedAction(eGA_Pull)) {
    Unhandled();
  } 
  // PICKUP
  else if(UsedAction(eGA_PickUp)) {
    Unhandled();
  }
  // GIVE TO (characters only)
  else if(UsedAction(eGA_GiveTo)) {
    Unhandled();
  }  
  //USE INV
  else if(UsedAction(eGA_UseInv)) {
    Unhandled();
  }
  else Unhandled();
}
*/

/* Inventory SAMPLE
  // LOOK AT
  else if(UsedAction(eGA_LookAt)) {
    Unhandled();
  }
  // USE
  else if(UsedAction(eGA_Use)) {
    Unhandled();
  }
  // Push
  else if(UsedAction(eGA_Push)) {
    Unhandled();
  }
  // Pull
  else if(UsedAction(eGA_Pull)) {
    Unhandled();
  }   
  //USE INV
  else if(UsedAction(eGA_UseInv)) {
    Unhandled();
  }
  else Unhandled();

*/

function cBman_AnyClick()
{ 

  // WALK TO
  if (UsedAction(eMA_WalkTo)) {
    Go();
  }
  // TALK TO
  else if (UsedAction(eGA_TalkTo)) {
    dDialog1.Start();
  }
  // LOOK AT
  else if(UsedAction(eGA_LookAt)) {
    Unhandled();
  }
  // OPEN
  else if(UsedAction(eGA_Open)) {
    Unhandled();
  }  
  // CLOSE
  else if(UsedAction(eGA_Close)) {
    Unhandled();
  }
  // USE
  else if(UsedAction(eGA_Use)) {
   Unhandled();
  }
  // Push
  else if(UsedAction(eGA_Push)) {
    Unhandled();
  }
  // Pull
  else if(UsedAction(eGA_Pull)) {
    Unhandled();
  } 
  // PICKUP
  else if(UsedAction(eGA_PickUp)) {
    Unhandled();
  }
  // GIVE TO
  else if (UsedAction(eGA_GiveTo)) {
    if (ItemGiven == iCup) {
      player.Say("Do you want this Cup?");
      cBman.Say("No, thank you.");
    }
    else Unhandled();
  }
  //USE INV
  else if(UsedAction(eGA_UseInv)) {
    player.Say("I'd rather give it to him.");
  }
  else Unhandled();
}


function iCup_OtherClick()
{
  // LOOK AT
  if(UsedAction(eGA_LookAt)) {
    player.Say("It's a blue cup.");
  }
  // USE
  else if(UsedAction(eGA_Use)) {
    Unhandled();
  }
  // Push
  else if(UsedAction(eGA_Push)) {
    Unhandled();
  }
  // Pull
  else if(UsedAction(eGA_Pull)) {
    Unhandled();
  } 
  //USE INV
  else if(UsedAction(eGA_UseInv)) {
    Unhandled();
  }
  else Unhandled();
}

function iEnvClose_OtherClick()
{
  if(UsedAction(eGA_Use) || UsedAction(eGA_Open)) {
    player.Say("Let's have a look...");
    Wait(5);
    player.LoseInventory(iEnvClose);
    player.AddInventory(iEnvOpen);
    Wait(5);
    player.Say("There's indeed a key inside this envelope.");
    player.AddInventory(iKey);
  }
  else if (UsedAction(eGA_Close))
  {
    player.Say("It's already closed.");
  }
  else if (UsedAction(eGA_LookAt))
  {
    player.Say("Beman gave me this.");
    player.Say("It seems like it's not empty.");
  }
  else Unhandled();
}

function iEnvOpen_OtherClick()
{
  if (UsedAction(eGA_LookAt))
  {
    player.Say("An empty envelope.");
  }
  else if (UsedAction(eGA_Open))
  {
    player.Say("It's already open.");
  }
  else if(UsedAction(eGA_UseInv)) {
    if (player.ActiveInventory == iKey) {   
      player.Say("I'll better put it back again.");
      Wait(5);
      player.LoseInventory(iKey);
      Wait(5);
      player.LoseInventory(iEnvOpen);
      player.AddInventory(iEnvClose);     
    }
    else Unhandled();  
  }
  else Unhandled();  
}

function iKey_OtherClick()
{
  if(UsedAction(eGA_LookAt)) {
    player.Say("It's a small key.");
  }
  else Unhandled();
}
